ARG UBUNTU_VERSION=22.04
ARG CUDA_VERSION=12.6.0
ARG ROCM_VERSION=5.7
ARG GPU_TYPE=nvidia

# Set base images based on GPU type
ARG BASE_DEV_CONTAINER=nvidia/cuda:${CUDA_VERSION}-devel-ubuntu${UBUNTU_VERSION}
ARG BASE_RUN_CONTAINER=nvidia/cuda:${CUDA_VERSION}-runtime-ubuntu${UBUNTU_VERSION}

# Override base images for AMD
ARG BASE_DEV_CONTAINER_AMD=rocm/dev-ubuntu:${UBUNTU_VERSION}
ARG BASE_RUN_CONTAINER_AMD=rocm/ubuntu:${UBUNTU_VERSION}

# Etapa de construcción
FROM ${BASE_DEV_CONTAINER} AS build

# Override base image for AMD
ARG GPU_TYPE
RUN if [ "${GPU_TYPE}" = "amd" ]; then \
    BASE_DEV_CONTAINER=${BASE_DEV_CONTAINER_AMD}; \
    BASE_RUN_CONTAINER=${BASE_RUN_CONTAINER_AMD}; \
    fi

ENV DEBIAN_FRONTEND=noninteractive
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1

# Instalar dependencias de compilación
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    build-essential \
    cmake \
    git \
    libcurl4-openssl-dev \
    libgomp1 \
    && rm -rf /var/lib/apt/lists/*

# Clonar llama.cpp y compilar
RUN git clone https://github.com/ggerganov/llama.cpp /code/llama.cpp

WORKDIR /code/llama.cpp

ARG CUDA_DOCKER_ARCH=default
RUN if [ "${CUDA_DOCKER_ARCH}" != "default" ]; then \
    export CMAKE_ARGS="-DCMAKE_CUDA_ARCHITECTURES=${CUDA_DOCKER_ARCH}"; \
    fi && \
    if [ "${GPU_TYPE}" = "nvidia" ]; then \
    cmake -B build -DGGML_NATIVE=OFF -DGGML_CUDA=ON -DLLAMA_CURL=ON ${CMAKE_ARGS} -DCMAKE_EXE_LINKER_FLAGS=-Wl,--allow-shlib-undefined .; \
    elif [ "${GPU_TYPE}" = "amd" ]; then \
    cmake -B build -DGGML_NATIVE=OFF -DGGML_ROCM=ON -DLLAMA_CURL=ON ${CMAKE_ARGS} -DCMAKE_EXE_LINKER_FLAGS=-Wl,--allow-shlib-undefined .; \
    fi && \
    cmake --build build --config Release -j$(nproc)

# Etapa de ejecución
FROM ${BASE_RUN_CONTAINER} AS final

# Override base image for AMD
ARG GPU_TYPE
RUN if [ "${GPU_TYPE}" = "amd" ]; then \
    BASE_RUN_CONTAINER=${BASE_RUN_CONTAINER_AMD}; \
    fi

ENV DEBIAN_FRONTEND=noninteractive
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1

# Establecer zona horaria a UTC
RUN ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo "UTC" > /etc/timezone

# Instalar Python 3.12 y dependencias necesarias
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    software-properties-common \
    libcurl4 \
    libgomp1 \
    wget \
    && add-apt-repository ppa:deadsnakes/ppa && \
    apt-get update && \
    apt-get install -y --no-install-recommends \
    python3.12 \
    python3.12-dev \
    python3.12-venv \
    tzdata \
    && dpkg-reconfigure --frontend noninteractive tzdata \
    && rm -rf /var/lib/apt/lists/*

# Configurar Python
RUN python3.12 -m ensurepip --upgrade && \
    python3.12 -m pip install --no-cache-dir --upgrade pip setuptools wheel && \
    update-alternatives --install /usr/bin/python python /usr/bin/python3.12 1

WORKDIR /code

# Copiar dependencias de Python y llama.cpp
COPY requirements.txt .
RUN if [ "${GPU_TYPE}" = "nvidia" ]; then \
    python3.12 -m pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu126; \
    elif [ "${GPU_TYPE}" = "amd" ]; then \
    python3.12 -m pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/rocm5.7; \
    fi && \
    python3.12 -m pip install --no-cache-dir -r requirements.txt && \
    python3.12 -m pip install --no-cache-dir uvicorn

COPY --from=build /code/llama.cpp /code/llama.cpp

# Copiar binario compilado
RUN cp /code/llama.cpp/build/bin/llama-cli /usr/local/bin/

COPY . /code/llm_generator

# Crear directorio para los modelos
RUN mkdir -p /code/llm_generator/models/gguf && \
    # Descargar el modelo "llama-3-sqlcoder-8b-GGUF" con cuantización Q8_0
    wget -O /code/llm_generator/models/gguf/llama-3-sqlcoder-8b-Q8_0.gguf \
    "https://huggingface.co/QuantFactory/llama-3-sqlcoder-8b-GGUF/resolve/main/llama-3-sqlcoder-8b.Q8_0.gguf" && \
    # Descargar el modelo "Llama-3.2-3B-Instruct-GGUF" con cuantización Q6_K_L
    wget -O /code/llm_generator/models/gguf/llama-3_2-3B-instruct-Q6_K_L.gguf \
    "https://huggingface.co/bartowski/Llama-3.2-3B-Instruct-GGUF/resolve/main/Llama-3.2-3B-Instruct-Q6_K_L.gguf"

# Run app.py when the container launches
CMD ["uvicorn", "llm_generator.main:app", "--host", "0.0.0.0", "--port", "8001"]